let temp = ''
<% fields.map(field => {_%>
    <% const s = field.relationType _%>
    <% let sqltype = getSQLTableName(field.type) _%>
    <% let entityInfo = field.name + field.type + field.relationType _%>
    <% if (field.type !== "ID") { _%>
        <% if (!isScalar(field.type)) {_%>
            <% switch (s) {
                case "oneToMany":_%>
                    //oneToMany update
                    // Field <%- field.name %> of type <%- field.type %>
                    sqlRequests.push("UPDATE \"<%- sqltype %>\" SET  \"<%-field.delegated_field.associatedWith.fieldName%>\" = " + args.id + " WHERE \"Pk_<%- sqltype %>_id\" = " + args.<%-field.name%> )
                    sqlRequests.push("UPDATE \"<%- sqltype %>\" SET  \"<%-field.delegated_field.associatedWith.fieldName%>\" = null WHERE \"<%-field.delegated_field.associatedWith.fieldName%>\" = " + args.id)

                    
                    <% break;
                case "oneToOne":_%>
                    //oneToOne update
                    sqlRequests.push("UPDATE \"<%- currentType.sqlTypeName %>\" SET  \"<%-field.foreign_key.name%>\" = " + args.<%-field.name%> +" WHERE \"Pk_<%- currentType.sqlTypeName %>_id\" = " + args.id)
                    
                    sqlRequests.push("UPDATE \"<%- sqltype %>\" SET \"<%-field.oneToOneInfo.fkName%>\" = null WHERE \"<%-field.oneToOneInfo.fkName%>\" = " + args.id)

                    sqlRequests.push("UPDATE \"<%- sqltype %>\" SET  \"<%-field.oneToOneInfo.fkName%>\" = " +  args.id +" WHERE \"Pk_<%- sqltype %>_id\" = " + args.<%-field.name%>)

                <% break;
                case "oneOnly":_%>
                    if(args.<%- field.name %> !== undefined){
                        temp += args.<%- field.name %> ? "\"<%- field.foreign_key.name %>\" = '" + args.<%- field.name %> + "', " :  "\"<%- field.foreign_key.name %>\" = null," 
                    }
                    <% break
                case "selfJoinOne":_%>
                    if(args.<%- field.name %> !== undefined){
                        temp += args.<%- field.name %> ? "\"<%- field.foreign_key.name %>\" = '" + args.<%- field.name %> + "', " :  "\"<%- field.foreign_key.name %>\" = null," 
                    }
                    <% break
                case "manyToOne": _%>
                    <%if(!field.joinTable.state){%>
                        //manyToOne update
                        // Field <%- field.name %> of type <%- field.type %>

                        sqlParams.sql = "SELECT * FROM \"<%- sqltype %>\" WHERE \"<%- sqltype %>\".\"<%-field.delegated_field.associatedWith.fieldName%>\" = " + args.id
                        rdsDataService.executeStatement(sqlParams, (err, data) => {
                            if (err) {console.log(err, err.stack)}
                                else {
                                    let current<%- field.type %>State = utils.constructOutputArray(data)

                            // <%- field.type %> to add
                            let addedElements<%- entityInfo %> = utils.getAddedElements(current<%- field.type%>State, args.<%- field.name %>)
                            for (let index = 0; index < addedElements<%- entityInfo %>.length; index++) {
                                sqlRequests.push("UPDATE \"<%- sqltype %>\" SET  \"<%-field.delegated_field.associatedWith.fieldName%>\" = " + args.id + " WHERE \"Pk_<%- sqltype %>_id\" = " + addedElements<%- entityInfo %>[index])
                                
                            }
                            // <%- field.type %> to delete
                            let removedElements<%- entityInfo %> = utils.getRemovedElements(current<%- field.type %>State, args.<%- field.name %>)
                            for (let index = 0; index < removedElements<%- entityInfo %>.length; index++) {
                                sqlRequests.push("UPDATE \"<%- sqltype %>\" SET  \"<%-field.delegated_field.associatedWith.fieldName%>\" = null WHERE \"Pk_<%- sqltype %>_id\" = " + removedElements<%- entityInfo %>[index])
                                
                            }
                        }})
                        
                        <%}%>
                    <% break
                case "manyOnly": _%>
                    //manyOnly update
                    // Field <%- field.name %> of type <%- field.type %>

                    sqlParams.sql = "SELECT * FROM \"<%- sqltype %>\" WHERE \"<%- sqltype %>\".\"<%-field.delegated_field.associatedWith.fieldName%>\" = " + args.id
                    rdsDataService.executeStatement(sqlParams, (err, data) => {
                        if (err) {console.log(err, err.stack)}
                            else {
                                let current<%- field.type %>State = utils.constructOutputArray(data)

                        // <%- field.type %> to add
                        let addedElements<%- entityInfo %> = utils.getAddedElements(current<%- field.type%>State, args.<%- field.name %>)
                        for (let index = 0; index < addedElements<%- entityInfo %>.length; index++) {
                            sqlRequests.push("UPDATE \"<%- sqltype %>\" SET  \"<%-field.delegated_field.associatedWith.fieldName%>\" = " + args.id + " WHERE \"Pk_<%- sqltype %>_id\" = " + addedElements<%- entityInfo %>[index])
                            
                        }
                        // <%- field.type %> to delete
                        let removedElements<%- entityInfo %> = utils.getRemovedElements(current<%- field.type %>State, args.<%- field.name %>)
                        for (let index = 0; index < removedElements<%- entityInfo %>.length; index++) {
                            sqlRequests.push("UPDATE \"<%- sqltype %>\" SET  \"<%-field.delegated_field.associatedWith.fieldName%>\" = null WHERE \"Pk_<%- sqltype %>_id\" = " + removedElements<%- entityInfo %>[index])
                            
                        }
                    }})
                    <% break
                case "manyToMany": _%>
        // Field <%- field.name %> of type <%- field.type %>
        <% let field1 = field.joinTable.contains.find(c => c.type === field.type).fieldName%>
        <% let field2 = field.joinTable.contains.find(c => c.type !== field.type).fieldName%> 
        sqlParams.sql = "SELECT * FROM \"<%- sqltype %>\" INNER JOIN \"<%- field.joinTable.name.toLowerCase() %>\" ON \"Pk_<%- sqltype %>_id\" = \"<%- field.joinTable.name.toLowerCase() %>\".\"<%- field1 %>_id\" INNER JOIN \"<%- currentType.sqlTypeName %>\" ON \"Pk_<%- currentType.sqlTypeName %>_id\" = \"<%- field.joinTable.name.toLowerCase() %>\".\"<%- field2 %>_id\" WHERE \"Pk_<%- currentType.sqlTypeName %>_id\" = " + args.id
        rdsDataService.executeStatement(sqlParams, (err, data) => {
            if (err) {console.log(err, err.stack)}
            else {
                let current<%- field.type %>State = utils.constructOutputArray(data, "<%- field.type %>")

                // <%- field.type %> to add
                let addedElements<%- entityInfo %> = utils.getAddedElements(current<%- field.type %>State, args.<%- field.name %>)
                for (let index = 0; index < addedElements<%- entityInfo %>.length; index++) {
                            sqlRequests.push("INSERT INTO \"<%- field.joinTable.name.toLowerCase() %>\" (\"<%- field2 %>_id\", \"<%- field1 %>_id\") VALUES ("+ args.id +", "+ addedElements<%- entityInfo%>[index]+")")
                }
                // <%- field.type %> to delete
                let removedElements<%- entityInfo %> = utils.getRemovedElements(current<%- field.type %>State, args.<%- field.name %>)
                for (let index = 0; index < removedElements<%- entityInfo %>.length; index++) {
                            sqlRequests.push("DELETE FROM \"<%- field.joinTable.name.toLowerCase() %>\" WHERE \"<%- field1 %>_id\" = " + removedElements<%- entityInfo %>[index] + " AND \"<%- field2 %>_id\" = " + args.id)
                            
                }

                
            }
        })

                        <% break
                    case "selfJoinMany": _%>
        // Field <%- field.name %> of type <%- field.type %>
        <% let fieldSelfJoin = field.joinTable.contains.find(c => c.type === field.type).fieldName%>
        sqlParams.sql = "SELECT * FROM \"<%- sqltype %>\" INNER JOIN \"<%- field.joinTable.name.toLowerCase() %>\" ON \"Pk_<%- sqltype %>_id\" = \"<%- field.joinTable.name.toLowerCase() %>\".\"<%- fieldSelfJoin %>_id\" INNER JOIN \"<%- currentType.sqlTypeName %>\" ON \"Pk_<%- currentType.sqlTypeName %>_id\" = \"<%- field.joinTable.name.toLowerCase() %>\".\"<%- sqltype %>_id\" WHERE \"Pk_<%- currentType.sqlTypeName %>_id\" = " + args.id
        rdsDataService.executeStatement(sqlParams, (err, data) => {
            if (err) {console.log(err, err.stack)}
            else {
                let current<%- field.type %>State = utils.constructOutputArray(data, "<%- field.type %>")

                // <%- field.type %> to add
                let addedElements<%- entityInfo %> = utils.getAddedElements(current<%- field.type %>State, args.<%- field.name %>)
                for (let index = 0; index < addedElements<%- entityInfo %>.length; index++) {
                            sqlRequests.push("INSERT INTO \"<%- field.joinTable.name.toLowerCase() %>\" (\"<%- sqltype %>_id\", \"<%- fieldSelfJoin %>_id\") VALUES ("+ args.id +", "+ addedElements<%- entityInfo %>[index]+")")
                }
                // <%- field.type %> to delete
                let removedElements<%- entityInfo %> = utils.getRemovedElements(current<%- field.type %>State, args.<%- field.name %>)
                for (let index = 0; index < removedElements<%- entityInfo %>.length; index++) {
                            sqlRequests.push("DELETE FROM \"<%- field.joinTable.name.toLowerCase() %>\" WHERE \"<%- fieldSelfJoin %>_id\" = " + removedElements<%- entityInfo %>[index] + " AND \"<%- sqltype %>_id\" = " + args.id)
                            
                }

                
            }
        })

                        <% break
                    
                    default: _%>
                        <% console.log("Error in handling relationship in update") %>
                        <% break
                }%>
            <% } else { _%>
                <%# // include scalars inject field %>
        <%- include('./scalars',{field: field,scalars: scalars}) %>
            <% }
        }
    })%>