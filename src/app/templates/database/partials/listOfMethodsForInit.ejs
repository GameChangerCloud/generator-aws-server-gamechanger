    <% for (let index = 0; index < types.length; index++) { _%>
        <%  if (typesName[index] !== "Query" && typesName[index] !== "Mutation") {
                //let fields = getFields(types[index])
                let type = types[index]
                let fields = []
                for (let index = 0; index < type["fields"].length; index++) {
                    fields.push(type["fields"][index])
                } _%>

                // Init <%-type.typeName _%> tables
                let <%- typesName[index].toLowerCase()_%>Tab = []
                for(let i = 0; i < 5; i++){
                    <%- typesName[index].toLowerCase()%>Tab.push(new model.<%- typesName[index]%>(<%- include('./getParametersForCreate', {currentType : types[index], fields : fields, matching : matching, table: tables[index]["columns"], tableName: tables[index].name})%>));
                }
                
                <%- include('./getUpdateForModel', {currentType : types[index], fields : fields, types : types, getSQLTableName: getSQLTableName}) %>
        <% }
    } %>

    // Other tables (Selfjoin & ManyToMany & Composition/aggregation tables)
        
    <%_types.forEach(type => {
        type.fields.forEach(field => {
            if(field.joinTable.state){
                if( (field.relationType === relations.manyToMany && field.activeSide) || field.relationType === relations.selfJoinMany || (field.relationType === relations.manyToOne && field.joinTable.state) ){_%>
                    let <%-field.joinTable.name.toLowerCase()%>Tab = []
                    for(let i = 0; i < 5; i++){
                        
                        <%- field.joinTable.name.toLowerCase()%>Tab.push({<%- field.joinTable.contains[0].fieldName.toLowerCase()%>_id : Math.floor((Math.random() * 5) + 1), <%-field.joinTable.contains[1].fieldName.toLowerCase()%>_id : Math.floor((Math.random() * 5) + 1)})
                        
                    }
                    removeConstraints.add(`ALTER TABLE "<%- getSQLTableName(field.joinTable.name)%>" DROP CONSTRAINT IF EXISTS "<%- getSQLTableName(field.joinTable.name)%>_<%- getSQLTableName(field.joinTable.contains[0].fieldName)%>_id_fkey"`)
                    removeConstraints.add(`ALTER TABLE "<%- getSQLTableName(field.joinTable.name)%>" DROP CONSTRAINT IF EXISTS "<%- getSQLTableName(field.joinTable.name)%>_<%- getSQLTableName(field.joinTable.contains[1].fieldName)%>_id_fkey"`)

                    
                    restoreConstraints.add(`ALTER TABLE "<%- getSQLTableName(field.joinTable.name)%>" ADD "<%-field.joinTable.contains[0].constraint%>" ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED`)
                    restoreConstraints.add(`ALTER TABLE "<%- getSQLTableName(field.joinTable.name)%>" ADD "<%-field.joinTable.contains[1].constraint%>" ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED`)
                    

                <%_}_%>
                
                
            <%_}_%>
            
        <%_})
    })_%>
