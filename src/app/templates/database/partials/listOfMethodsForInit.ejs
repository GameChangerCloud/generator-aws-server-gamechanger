<% types.forEach((type, index) => { _%>
    <%  if (type.isNotOperation()) { _%>
    // Init <%-type.typeName _%> tables
    let <%- type.typeName.toLowerCase()_%>Tab = []
    for(let i = 0; i < 5; i++){
    <%- type.typeName.toLowerCase()%>Tab.push(new model.<%- type.typeName%>(<%- include('./getParametersForCreate.ejs', {currentType : type, matchString : matchString, table: tables[index]})%>));
    }
    <%- include('./getUpdateForModel.ejs', {currentType : type}) %>
<% }
}) %>
// Other tables (joinTables)
<%let joinTablesDefined = [];%>
<%_types.forEach(type => {
    type.fields.forEach(field => {
        if(field.joinTable.state && !joinTablesDefined.includes(field.joinTable.name)){
        joinTablesDefined.push(field.joinTable.name)
        if( (field.relationType === relations.manyToMany) ){_%>
                let <%-field.joinTable.name.toLowerCase()%>Tab = []
                for(let i = 0; i < 5; i++){
                    <%- field.joinTable.name.toLowerCase()%>Tab.push({<%- field.joinTable.contains[0].fieldName.toLowerCase()%> : Math.floor((Math.random() * 5) + 1), <%-field.joinTable.contains[1].fieldName.toLowerCase()%> : Math.floor((Math.random() * 5) + 1)})
                }
                removeConstraints.add(`ALTER TABLE "<%- field.joinTable.name.toLowerCase()%>" DROP CONSTRAINT IF EXISTS "<%- field.joinTable.name.toLowerCase()%>_<%- field.joinTable.contains[0].fieldName%>_fkey"`)
                removeConstraints.add(`ALTER TABLE "<%- field.joinTable.name.toLowerCase()%>" DROP CONSTRAINT IF EXISTS "<%- field.joinTable.name.toLowerCase()%>_<%- field.joinTable.contains[1].fieldName%>_fkey"`)
                restoreConstraints.add(`ALTER TABLE "<%- field.joinTable.name.toLowerCase()%>" ADD <%-field.joinTable.contains[0].constraint%> ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED`)
                restoreConstraints.add(`ALTER TABLE "<%- field.joinTable.name.toLowerCase()%>" ADD <%-field.joinTable.contains[1].constraint%> ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED`)
            <%_}_%>
        <%_}_%>
    <%_})
})_%>