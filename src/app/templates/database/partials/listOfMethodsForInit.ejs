    <% types.forEach(type, index => { _%>
        <%  if (type.isNotOperation()) {
                // Init <%-type.typeName _%> tables
                let <%- type.typeName.toLowerCase()_%>Tab = []
                for(let i = 0; i < 5; i++){
                    <%- type.typeName.toLowerCase()%>Tab.push(new model.<%- type.typeName%>(<%- include('./getParametersForCreate.ejs', {currentType : type, matchString : matchString, table: tables[index]})%>));
                }
                
                <%- include('./getUpdateForModel.ejs', {currentType : type) %>
        <% }
    }) %>

    // Other tables (Selfjoin & ManyToMany & Composition/aggregation tables)
        
    <%_types.forEach(type => {
        type.fields.forEach(field => {
            if(field.joinTable.state){
                if( (field.relationType === relations.manyToMany && field.activeSide) || field.relationType === relations.selfJoinMany || (field.relationType === relations.manyToOne && field.joinTable.state) ){_%>
                    let <%-field.joinTable.sqlName%>Tab = []
                    for(let i = 0; i < 5; i++){
                        
                        <%- field.joinTable.sqlName%>Tab.push({<%- field.joinTable.contains[0].fieldName.toLowerCase()%>_id : Math.floor((Math.random() * 5) + 1), <%-field.joinTable.contains[1].fieldName.toLowerCase()%>_id : Math.floor((Math.random() * 5) + 1)})
                        
                    }
                    removeConstraints.add(`ALTER TABLE "<%- field.joinTable.sqlName%>" DROP CONSTRAINT IF EXISTS "<%- field.joinTable.sqlName%>_<%- field.joinTable.contains[0].fieldName)%>_id_fkey"`)
                    removeConstraints.add(`ALTER TABLE "<%- field.joinTable.sqlName%>" DROP CONSTRAINT IF EXISTS "<%- field.joinTable.sqlName%>_<%- field.joinTable.contains[1].fieldName)%>_id_fkey"`)

                    
                    restoreConstraints.add(`ALTER TABLE "<%- field.joinTable.sqlName%>" ADD "<%-field.joinTable.contains[0].constraint%>" ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED`)
                    restoreConstraints.add(`ALTER TABLE "<%- field.joinTable.sqlName%>" ADD "<%-field.joinTable.contains[1].constraint%>" ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED`)
                    

                <%_}_%>
                
                
            <%_}_%>
            
        <%_})
    })_%>
