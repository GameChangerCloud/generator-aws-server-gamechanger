<%types.forEach(type => {_%>
    <%if (type.isNotOperation()){_%>
        <%-type.typeName.toLowerCase()%>Tab.forEach(item =>{
            let temp = `INSERT INTO "<%-type.sqlTypeName%>"(
            <% let fieldInsertList = []
                let itemInsertList = []%>
            <%_type.fields.forEach( field =>  {
                if (field.type !== "ID" && field.in_model){
                    if (field.sqlType === "int"){
                        if(field.foreign_key !== null){
                            fieldInsertList.push(field.foreign_key.name)
                        }
                        else{
                            fieldInsertList.push(field.name)
                        }
                        itemInsertList.push(["+ item."+ field.name+ " +","numeric"])
                    }else{
                        fieldInsertList.push(field.name)
                        itemInsertList.push(["+ item."+ field.name+".replace(/'/g, \"\\\'\")" + " +", "else"])
                    }
                }
            })_%>
            <%fieldInsertList.forEach((fieldInsert, index) => {_%>
                "<%-fieldInsert-%>"
                <%if (index < fieldInsertList.length - 1 ) {-%>,<%}%>

            <%});_%>
            ) VALUES (
                <%itemInsertList.forEach((itemInsert, index) => {_%>
                <%if (itemInsert[1] === "else" ) {_%>'`<%}else{%>`<%}%>
                <%-itemInsert[0]%>
                <%if (itemInsert[1] === "else" ) {_%>`'<%}else{%>`<%}%>
                <%if (index < itemInsertList.length - 1 ) {_%>,<%}%>

            <%});_%>
                )`
                queriesInsert.push(temp.replace(/\n/g,''))
                })
        <%}%>
    <%})_%>

    // JOINTABLES
    <%let joinTablesDefined = [];%>
    <%_types.forEach(type => {
        type.fields.forEach(field => {

            if(field.joinTable.state && !joinTablesDefined.includes(field.joinTable.name)){%>
                    <%joinTablesDefined.push(field.joinTable.name)%>
                    <%if((field.relationType === relations.manyToMany)){%>
                        <%-field.joinTable.name.toLowerCase()%>Tab.forEach(item =>{
                            let temp = `INSERT INTO "<%-field.joinTable.name.toLowerCase()%>"(
                                "<%-field.joinTable.contains[0].fieldName.toLowerCase()%>_id",
                                "<%-field.joinTable.contains[1].fieldName.toLowerCase()%>_id")
                                VALUES (` + item.<%-field.joinTable.contains[0].fieldName.toLowerCase()%>_id +` ,
                                ` + item.<%-field.joinTable.contains[1].fieldName.toLowerCase()%>_id + `)`
                                queriesInsert.push(temp.replace(/\n/g,''))
                        })
                    <%}

                if(field.relationType === relations.selfJoinMany){%>
                    <%-field.joinTable.name.toLowerCase()%>Tab.forEach(item =>{
                        let temp = `INSERT INTO "<%-field.joinTable.name.toLowerCase()%>"(
                            "<%-field.joinTable.contains[0].fieldName.toLowerCase()%>_id",
                            "<%-field.joinTable.contains[0].type.toLowerCase()%>_id")
                            VALUES (` + item.<%-field.joinTable.contains[0].fieldName.toLowerCase()%>_id +` ,
                                ` + item.<%-field.joinTable.contains[0].type.toLowerCase()%>_id + `)`
                                queriesInsert.push(temp.replace(/\n/g,''))
                    })
                <%}
            }

        })
    })_%>