function update<%- currentType.typeName%>(<%-currentType.typeName.toLowerCase()%> , index){
    <%_currentType.fields.forEach(field => {_%>
        <%_if(field.in_model && field.relation && !field.joinTable.state){
            let currentTypeName =  currentType.typeName // currentType name
            let currentSQLTypeName =  currentType.typeName // currentType name
            let fTypeName = field.type // field Type name _%>
            <%_switch( field.relationType) {
                case "oneOnly":_%>
                    //oneOnly field management
                    <%-currentTypeName.toLowerCase()%> = update(<%-currentTypeName.toLowerCase()%>, '<%-field.name%>', Math.floor((Math.random() * 5) + 1), new model.<%-currentTypeName%>)
                    removeConstraints.add(`ALTER TABLE "<%-currentSQLTypeName.toLowerCase()%>" DROP CONSTRAINT IF EXISTS "<%-field.foreign_key.name%>_fkey"`)
                    restoreConstraints.add(`ALTER TABLE "<%-currentSQLTypeName.toLowerCase()%>" ADD <%-field.foreign_key.constraint%> ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED`)

                    <%break
                case "selfJoinOne":_%>
                    //selfJoinOne field management
                    let selfPossibleValues = [1,2,3,4,5].sort( () => .5 - Math.random() )
                    selfPossibleValues.splice(selfPossibleValues.indexOf(index),1)
                    let selfJoinId = selfPossibleValues[0]
                    <%-currentTypeName.toLowerCase()%> = update(<%-currentTypeName.toLowerCase()%>, '<%-field.name%>', selfJoinId, new model.<%-currentTypeName%>)
                    removeConstraints.add(`ALTER TABLE "<%-currentSQLTypeName.toLowerCase()%>" DROP CONSTRAINT IF EXISTS"<%-field.foreign_key.name%>_fkey"`)
                    restoreConstraints.add(`ALTER TABLE "<%-currentSQLTypeName.toLowerCase()%>" ADD <%-field.foreign_key.constraint%> ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED`)

                <%break
                case  "oneToOne":_%>
                    //oneToOne field management
                    // we look if the relation is alredy present
                    if(entityIndex.find( element => element.name === "<%-currentTypeName%>_<%-fTypeName%>_oneToOne" || element.name === "<%-fTypeName%>_<%-currentTypeName%>_oneToOne" )){
                        let tmp = entityIndex.find( element => element.name === "<%-currentTypeName%>_<%-fTypeName%>_oneToOne" || element.name === "<%-fTypeName%>_<%-currentTypeName%>_oneToOne" )
                        <%-currentTypeName.toLowerCase()%> = update(<%-currentTypeName.toLowerCase()%>, '<%-field.name%>', tmp.values<%-fTypeName%>[tmp.values<%-currentTypeName%>.indexOf(index +1)], new model.<%-currentTypeName%>)

                    }// if doenst exist we create it and sort the field type indexes
                    else{
                        entityIndex.push(
                            {
                                name : "<%-currentTypeName%>_<%-fTypeName%>_oneToOne",
                                values<%-currentTypeName%> : [1,2,3,4,5],
                                values<%-fTypeName%> : [1,2,3,4,5].sort( () => .5 - Math.random() )
                            }
                        )
                        if(entityIndex.find( element => element.name === "<%-currentTypeName%>_<%-fTypeName%>_oneToOne" || element.name === "<%-fTypeName%>_<%-currentTypeName%>_oneToOne" )){
                            let tmp = entityIndex.find( element => element.name === "<%-currentTypeName%>_<%-fTypeName%>_oneToOne" || element.name === "<%-fTypeName%>_<%-currentTypeName%>_oneToOne" )
                            <%-currentTypeName.toLowerCase()%> = update(<%-currentTypeName.toLowerCase()%>, '<%-field.name%>', tmp.values<%-fTypeName%>[tmp.values<%-currentTypeName%>.indexOf(index +1)], new model.<%-currentTypeName%>)

                        }
                        // we drop and restore constraints only once
                        removeConstraints.add(`ALTER TABLE "<%-currentSQLTypeName.toLowerCase()%>" DROP CONSTRAINT IF EXISTS "<%-field.foreign_key.name%>_fkey"`)
                        restoreConstraints.add(`ALTER TABLE "<%-currentSQLTypeName.toLowerCase()%>" ADD <%-field.foreign_key.constraint%> ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED`)
                    }
                    <%break
                case  "oneToMany":
                    if(field.delegated_field.state && field.delegated_field.side === "target" ){_%>
                        //OneToMany field Management
                        <%-currentTypeName.toLowerCase()%> = update(<%-currentTypeName.toLowerCase()%>, '<%-field.name%>', Math.floor((Math.random() * 5) + 1), new model.<%-currentTypeName%>)
                        removeConstraints.add(`ALTER TABLE "<%-currentSQLTypeName.toLowerCase()%>" DROP CONSTRAINT IF EXISTS "<%-field.foreign_key.name%>_fkey"`)
                        restoreConstraints.add(`ALTER TABLE "<%-currentSQLTypeName.toLowerCase()%>" ADD <%-field.foreign_key.constraint%> ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED`)

                    <%_}_%>
                    <%break
                case  "manyToOne":
                    if(field.delegated_field.state && field.delegated_field.side === "target" ){_%>
                        //manyToOne field Management
                        <%-currentTypeName.toLowerCase()%> = update(<%-currentTypeName.toLowerCase()%>, '<%-field.name%>', Math.floor((Math.random() * 5) + 1), new model.<%-currentTypeName%>)
                        removeConstraints.add(`ALTER TABLE "<%-currentSQLTypeName.toLowerCase()%>" DROP CONSTRAINT IF EXISTS "<%-field.foreign_key.name%>_fkey"`)
                        restoreConstraints.add(`ALTER TABLE "<%-currentSQLTypeName.toLowerCase()%>" ADD <%-field.foreign_key.constraint%> ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED`)
                    <%_}_%>
                    <%break
                case  "manyOnly":
                    if(field.delegated_field.state && field.delegated_field.side === "target" ){_%>
                        //manyOnly field Management
                        <%-currentTypeName.toLowerCase()%> = update(<%-currentTypeName.toLowerCase()%>, '<%-field.name%>', Math.floor((Math.random() * 5) + 1), new model.<%-currentTypeName%>)
                        removeConstraints.add(`ALTER TABLE "<%-currentSQLTypeName.toLowerCase()%>" DROP CONSTRAINT IF EXISTS "<%-field.foreign_key.name%>_fkey"`)
                        restoreConstraints.add(`ALTER TABLE "<%-currentSQLTypeName.toLowerCase()%>" ADD <%-field.foreign_key.constraint%> ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED`)
                    <%_}_%>
                    <%break_%>
                <%_}_%>
            <%}_%>
    <%});_%>
    return <%-currentType.typeName.toLowerCase() %>
}