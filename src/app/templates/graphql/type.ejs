const {
	GraphQLObjectType,
	GraphQLID,
	GraphQLString,
	GraphQLList,
	GraphQLBoolean,
	GraphQLNonNull,
	GraphQLInt,
	GraphQLInterfaceType
} = require('graphql')

const {
	ObjectID,
  Date: DateGraphQL, // Avoid same name issue when casting into a new Date()
  Time,
  DateTime,
  UtcOffset,
  NonPositiveInt,
  PositiveInt,
  NonNegativeInt,
  NegativeInt,
  NonPositiveFloat,
  PositiveFloat,
  NonNegativeFloat,
  NegativeFloat,
  UnsignedFloat,
  UnsignedInt,
  BigInt,
  Long,
  EmailAddress,
  URL,
  PhoneNumber,
  PostalCode,
  GUID,
  HexColorCode,
  HSL,
  HSLA,
  RGB,
  RGBA,
  IPv4,
  IPv6,
  MAC,
  Port,
  ISBN,
  USCurrency,
  Currency,
  JSON,
  JSONObject,
	Byte
} = require('../defaultScalarsMap')

const dbHandler = require('../../database/handler')
const { Query } = require('pg')

module.exports = new <%-graphqlType%>({
	name: '<%=type.typeName%>Type',
	<% if(interfaces){%>interfaces : [<%-interfaces%>],
	<%}%>description: '',
	fields: () => ({
    <%type.fields.forEach(field => {_%>  
      <%_if( !field.delegated_field.state){
        switch(field.type) {
            case "ID":%>
                <%- include('../database/partials/graphqlTypeBuilder.ejs', { field: field, type: "GraphQLID", needResolver: false }) _%>
              <%break
            case "String":_%>
                <%- include('../database/partials/graphqlTypeBuilder.ejs', { field: field, type: "GraphQLString", needResolver: false  }) _%>
              <%break
            case "Int":_%>
                <%- include('../database/partials/graphqlTypeBuilder.ejs', { field: field, type: "GraphQLInt", needResolver: false  }) _%>
              <%break
            case "Boolean":_%>
                <%- include('../database/partials/graphqlTypeBuilder.ejs', { field: field, type: "GraphQLBoolean", needResolver: false  }) _%>
              <%break
              // Not classic scalar type
            default:
              if (isPersonalizedScalar(field.type)) {%>
                <%- include('../database/partials/graphqlTypeBuilder.ejs', { field: field, type: field.type, needResolver: false  }) _%>
                
            <%} else {%><%# means its a relationType %>
              <%- include('../database/partials/graphqlTypeBuilder.ejs', { field: field, type: field.type+"Type" , needResolver: true }) _%>
            <%_}_%>
                


        <%_}
      }_%>
      
    <%});%>
	
  
  
  
  
  
  
  
  })

})

<%-typeRequire%>



