sqlRequests = []
sqlRequests.push("INSERT INTO \"<%-sqltypeName%>\" (<%-fieldsName%>) VALUES (" + <%-fieldsCreate%> + ") ")
<% let containsRelations = true %>
<% fields.map(field => { _%>
    <% const s = field.relationType _%>
    <% let sqltype = getSQLTableName(field.type) _%>
        <% if (!isScalar(field.type)) { 
            containsRelations = false _%>
            <%  switch (s.trim()) {  
                case "oneToMany": _%>
                
                        sqlRequests.push("UPDATE \"<%- sqltype %>\" SET  \"<%-field.delegated_field.associatedWith.fieldName%>\" = currval(pg_get_serial_sequence('<%- sqltypeName %>','Pk_<%- sqltypeName %>_id')) WHERE \"Pk_<%- sqltype %>_id\" = " + args.<%-field.name%>)
                        
                   <% break; 
                case "oneToOne": _%>
                //OneToOne relation
                sqlRequests.push("UPDATE \"<%- sqltype %>\" SET  \"<%-field.oneToOneInfo.fkName%>\" = currval(pg_get_serial_sequence('<%- sqltypeName %>','Pk_<%- sqltypeName %>_id')) WHERE \"Pk_<%- sqltype %>_id\" = " + args.<%-field.name%> )

                    <% break; 
                case "oneOnly": _%>
                    <%break
                case "selfJoinOne": _%>
                    <%break
                case "manyToOne":
                    if(!field.joinTable.state){%>
                        //manyToOne
                        let addedElements<%- sqltype %> = utils.getAddedElements([], args.<%- field.name%>)
                        for (let index = 0; index < addedElements<%- sqltype %>.length; index++) {					
                            sqlRequests.push("UPDATE \"<%- sqltype %>\" SET  \"<%-field.delegated_field.associatedWith.fieldName%>\" = currval(pg_get_serial_sequence('<%- sqltypeName %>','Pk_<%- sqltypeName %>_id')) WHERE \"Pk_<%- sqltype %>_id\" = " + addedElements<%- sqltype %>[index])
                        }
                    
                    <%}%>
                   <% break 
                case "manyOnly":_%>
                    let addedElements<%- sqltype %> = utils.getAddedElements([], args.<%- field.name%>)
                        for (let index = 0; index < addedElements<%- sqltype %>.length; index++) {					
                            sqlRequests.push("UPDATE \"<%- sqltype %>\" SET  \"<%-field.delegated_field.associatedWith.fieldName%>\" = currval(pg_get_serial_sequence('<%- sqltypeName %>','Pk_<%- sqltypeName %>_id')) WHERE \"Pk_<%- sqltype %>_id\" = " + addedElements<%- sqltype %>[index])
                        }
                    <%break
                case "manyToMany": _%>
                //manyToMany
                <% let field1 = field.joinTable.contains.find(c => c.type === field.type).fieldName%>
                <% let field2 = field.joinTable.contains.find(c => c.type !== field.type).fieldName%>
                // Field <%- field.name %> of type <%- sqltype %>
                for( element in args.<%-field.name%>){
                    sqlRequests.push("INSERT INTO \"<%- field.joinTable.name.toLowerCase()%>\" (\"<%- field2 %>_id\", \"<%- field1 %>_id\") VALUES (currval(pg_get_serial_sequence('<%- sqltypeName %>','Pk_<%- sqltypeName %>_id')), "+ args.<%- field.name%>[element]+")" )
                }
                    <%break
                case "selfJoinMany": _%>
                //selfJoinMany
                    <% let fieldSelfJoin = field.joinTable.contains.find(c => c.type === field.type).fieldName%>
                    // Field <%- field.name %> of type <%- sqltype %>
                        for( element in args.<%-field.name%>){
                            sqlRequests.push("INSERT INTO \"<%- field.joinTable.name.toLowerCase()%>\" (\"<%- sqltypeName %>_id\", \"<%- fieldSelfJoin %>_id\") VALUES (currval(pg_get_serial_sequence('<%- sqltypeName %>','Pk_<%- sqltypeName %>_id')), "+ args.<%- field.name%>[element]+")" )
                        }
    
    
                    
                    <% break
                default: _%>
                    <% console.log("Error in handling relationship in create") %>
                    <% break %>
            <% }
        }
})%>
    <% if( containsRelations){_%>
        utils.startSqlTransaction(sqlRequests, beginParams, commitParams, sqlParams, rdsDataService)
    <%}%>
