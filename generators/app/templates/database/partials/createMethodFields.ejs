<% fields.map(field => { _%>
    <% const s = include('./getRelationBetween',{typeOne: field.type, typeTwo: typeName,relations: relations}) _%>
    <% let sqltype = field.type.charAt(0).toLowerCase() + field.type.slice(1);
    sqltype = sqltype.replace(/([A-Z])/g, (e) => { return '_' + e.toLowerCase()})
    sqltype = sqltype.replace(/(__)/g, (e) => { return '_'}) _%>
    <% if (field.type !== "ID") { _%>
        <% if (field.type !== "String" && field.type !== "ID" && field.type !== "Int" && field.type != "Boolean") { _%>

            <%  switch (s.trim()) { 

                case "oneToMany": _%>
                   <% break; 
                case "oneOnly": _%>
                    <%break
                case "manyToOne":%>
                   <% break 
                case "manyOnly":_%>
                    let addedElements<%- sqltype %> = utils.getAddedElements([], args.<%- field.name%>)
                        for (let index = 0; index < addedElements<%- sqltype %>.length; index++) {					
                            sqlParams.sql = "UPDATE \"<%- sqltype %>\" SET  \"Fk_<%- sqltypeName %>_id\" = " + args.id + " WHERE \"Pk_<%- sqltype %>_id\" = " + addedElements<%- sqltype %>[index]
                            rdsDataService.executeStatement(sqlParams, (err, data) => {
                                if (err) console.log(err, err.stack);
                                else console.log(data);   
                            })
                        }
                    <%break
                case "manyToMany": _%>
                    // Get the junction table
                    <% let manyToManyTable = include('getManyToManyTableBetween',{typeOne: typeName,typeTwo: field.type,manyToManyTables: manyToManyTables}).name %>
    // Field <%- field.name %> of type <%- sqltype %> 
    sqlParams.sql = "SELECT * FROM \"<%- sqltype %>\" INNER JOIN \" <%- manyToManyTable %> \" ON \"Pk_<%- sqltype %>_id\" = \"<%- manyToManyTable %>\".\"<%- sqltype %>_id\" INNER JOIN \"<%- sqltypeName %>\" ON \"Pk_<%- sqltypeName %>_id\" = \" <%- manyToManyTable %>\".\"<%- sqltypeName %>_id\" WHERE \"Pk_<%- sqltypeName %>_id\" = " + args.id
    rdsDataService.executeStatement(sqlParams, (err, data) => {
        if (err) {console.log(err, err.stack)}
        else {
            let current<%- sqltype %>State = utils.constructOutputArray(data, "<%- sqltype %>")
            // <%- sqltype %> to add
            let addedElements<%- sqltype %> = utils.getAddedElements(current<%- sqltype %>State, args.<%- field.name %>)
            rdsDataService.beginTransaction(beginParams, function (err, data) {
                if (err) console.log(err, err.stack); // an error occurred
                else {
                    for (let index = 0; index < addedElements<%- sqltype %>.length; index++) {					
                        sqlParams.sql = "INSERT INTO \"<%- manyToManyTable %>\" (\"<%- sqltypeName %>_id\", \"<%- sqltype %>_id\") VALUES ("+ args.id +", "+ addedElements<%- sqltype%>[index]+")"
                        rdsDataService.executeStatement(sqlParams, (err, data) => {
                            if (err) console.log(err, err.stack);
                            else console.log(data);   
                        })
                    }
                    commitParams.transactionId = data.transactionId
                    rdsDataService.commitTransaction(commitParams, function (err, data) {
                        if (err) console.log(err, err.stack); // an error occurred
                        else console.log(data)
                    })
                }
            })        
        }
    })
                    <%break
                case "oneToOneParent": _%>
                    // A child cannot change its parent in unidirectional
                    if(args.<%- field.name %>) {
        throw 'Error, a child in 1 - 1 unildirectional relation cannot modify its parent' 
    }
                    <# /* Case bidirectional not supported */ %>
                    <% break
                case "oneToOneChild": _%>
                    <% if (field.noNull) { _%>
    // Case bidirectional, not supported
    // Got the field
                    <% } else { _%>
    // Don't have the field
    // Remove te previous child
    sqlParams.sql = "UPDATE \"<%- sqltype %>\" SET \"Fk_<%- sqltypeName %>_id\" = null WHERE \"Pk_<%- sqltype %>_id\" = (SELECT \"Pk_<%- sqltype %>_id\" FROM \"<%- sqltype %>\" WHERE \"Fk_<%- sqltypeName %>_id\" = " + args.id + ")"
    rdsDataService.executeStatement(sqlParams, (err, data) => {
    if (err) {console.log(err, err.stack)}
    else { 
        sqlParams.sql = "UPDATE \"<%- sqltype %>\" SET \"Fk_<%- sqltypeName %>_id\" = " + args.id + " WHERE \"Pk_<%- sqltype %>_id\" = " + args.<%- field.name %>
            rdsDataService.executeStatement(sqlParams, (err, data) => {
                if (err) {console.log(err, err.stack)}
                else {console.log(data)}
            })
        }
    })
    <% } _%>
                    <% break
                default: _%>
                    <% console.log("Error in handling relationship") %>
                    <% break %>
            <% }
        }
    }
})%>