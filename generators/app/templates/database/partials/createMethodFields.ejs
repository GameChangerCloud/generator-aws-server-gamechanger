sqlRequests = []
sqlRequests.push("INSERT INTO \"<%-sqltypeName%>\" (<%-fieldsName%>) VALUES (" + <%-fieldsCreate%> + ") ")


<% fields.map(field => { _%>
    <% const s = include('./getRelationBetween',{typeOne: field.type, typeTwo: typeName,relations: relations}) _%>
    <% let sqltype = getSQLTableName(field.type) _%>
    <% if (field.type !== "ID") { _%>
        <% if (field.type !== "String" && field.type !== "ID" && field.type !== "Int" && field.type != "Boolean") { _%>
            <%  switch (s.trim()) { 

                case "oneToMany": _%>
                   <% break; 
                case "oneOnly": _%>
                    <%break
                case "manyToOne":%>
                   <% break 
                case "manyOnly":_%>
                    let addedElements<%- sqltype %> = utils.getAddedElements([], args.<%- field.name%>)
                        for (let index = 0; index < addedElements<%- sqltype %>.length; index++) {					
                            sqlParams.sql = "UPDATE \"<%- sqltype %>\" SET  \"Fk_<%- sqltypeName %>_id\" = " + args.id + " WHERE \"Pk_<%- sqltype %>_id\" = " + addedElements<%- sqltype %>[index]
                            rdsDataService.executeStatement(sqlParams, (err, data) => {
                                if (err) console.log(err, err.stack);
                                else console.log(data);   
                            })
                        }
                    <%break
                case "manyToMany": _%>
                    // Get the junction table
                    <% let manyToManyTable = getSQLTableName(JSON.parse(include('getManyToManyTableBetween',{typeOne: typeName,typeTwo: field.type,manyToManyTables: manyToManyTables})).name) %>
    
    // Field <%- field.name %> of type <%- sqltype %> 
    sqlRequests.push("SELECT * FROM \"<%- sqltype %>\" INNER JOIN \"<%- manyToManyTable %>\" ON \"Pk_<%- sqltype %>_id\" = \"<%- manyToManyTable %>\".\"<%- sqltype %>_id\" INNER JOIN \"<%- sqltypeName %>\" ON \"Pk_<%- sqltypeName %>_id\" = \"<%- manyToManyTable %>\".\"<%- sqltypeName %>_id\" WHERE \"Pk_<%- sqltypeName %>_id\" = " + args.id)
    let current<%- sqltype %>State , addedElements<%- sqltype %> = await rdsDataService.executeStatement(sqlParams, (err, data) => {
        if (err) {
            console.log(err, err.stack)
            return null, null
        }
        else {
            return utils.constructOutputArray(data, "<%- sqltype %>"), utils.getAddedElements(current<%- sqltype %>State, args.<%- field.name %>) 
            
        }
    })
    
    for (let index = 0; index < addedElements<%- sqltype %>.length; index++) {					
        sqlRequests.push("INSERT INTO \"<%- manyToManyTable %>\" (\"<%- sqltypeName %>_id\", \"<%- sqltype %>_id\") VALUES ("+ args.id +", "+ addedElements<%- sqltype%>[index]+")" )
    }
    utils.startSqlTransaction(sqlRequests, beginParams, commitParams, sqlParams, rdsDataService)
                    <%break
                case "oneToOneParent": _%>
                    // A child cannot change its parent in unidirectional
                    if(args.<%- field.name %>) {
        throw 'Error, a child in 1 - 1 unildirectional relation cannot modify its parent' 
    }
                    <# /* Case bidirectional not supported */ %>
                    <% break
                case "oneToOneChild": _%>
                    <% if (field.noNull) { _%>
    // Case bidirectional, not supported
    // Got the field
                    <% } else { _%>
    // Don't have the field
    // Remove te previous child
    sqlParams.sql = "UPDATE \"<%- sqltype %>\" SET \"Fk_<%- sqltypeName %>_id\" = null WHERE \"Pk_<%- sqltype %>_id\" = (SELECT \"Pk_<%- sqltype %>_id\" FROM \"<%- sqltype %>\" WHERE \"Fk_<%- sqltypeName %>_id\" = " + args.id + ")"
    rdsDataService.executeStatement(sqlParams, (err, data) => {
    if (err) {console.log(err, err.stack)}
    else { 
        sqlParams.sql = "UPDATE \"<%- sqltype %>\" SET \"Fk_<%- sqltypeName %>_id\" = " + args.id + " WHERE \"Pk_<%- sqltype %>_id\" = " + args.<%- field.name %>
            rdsDataService.executeStatement(sqlParams, (err, data) => {
                if (err) {console.log(err, err.stack)}
                else {console.log(data)}
            })
        }
    })
    <% } _%>
                    <% break
                default: _%>
                    <% console.log("Error in handling relationship in create") %>
                    <% break %>
            <% }
        }
    }
})%>