    function update<%- currentType.typeName%>(<%-currentType.typeName.toLowerCase()%> , index){
    <%_currentType.fields.forEach(field => {_%>
        <%_if(field.in_model && field.relation && !field.joinTable.state){
            let currTypeName =  currentType.typeName // currentType name
            let fTypeName = field.type // field Type name _%> 
            <%_switch( field.relationType) {
                case "oneOnly":_%>
                    //oneOnly field management
                    <%-currTypeName.toLowerCase()%> = update(<%-currTypeName.toLowerCase()%>, '<%-field.name%>', Math.floor((Math.random() * 5) + 1), new model.<%-currTypeName%>)
                    removeConstraints.add("ALTER TABLE \"<%-currTypeName.toLowerCase()%>\" DROP CONSTRAINT \"<%-field.foreign_key.name%>_fkey\"")
                    restoreConstraints.add(`ALTER TABLE "<%-currTypeName.toLowerCase()%>" ADD <%-field.foreign_key.constraint%> DEFERRABLE INITIALLY DEFERRED`)
                
                    <%break
                case "selfJoinOne":_%>
                    //oneOnly field management
                    <%-currTypeName.toLowerCase()%> = update(<%-currTypeName.toLowerCase()%>, '<%-field.name%>', Math.floor((Math.random() * 5) + 1), new model.<%-currTypeName%>)
                    removeConstraints.add("ALTER TABLE \"<%-currTypeName.toLowerCase()%>\" DROP CONSTRAINT \"<%-field.foreign_key.name%>_fkey\"")
                    restoreConstraints.add(`ALTER TABLE "<%-currTypeName.toLowerCase()%>" ADD <%-field.foreign_key.constraint%> DEFERRABLE INITIALLY DEFERRED`)
            
                <%break
                case  "oneToOne":_%>
                    //oneToOne field management
                    // we look if the relation is alredy present 
                    if(entityIndex.find( element => element.name === "<%-currTypeName%>_<%-fTypeName%>_oneToOne" || element.name === "<%-fTypeName%>_<%-currTypeName%>_oneToOne" )){
                        let tmp = entityIndex.find( element => element.name === "<%-currTypeName%>_<%-fTypeName%>_oneToOne" || element.name === "<%-fTypeName%>_<%-currTypeName%>_oneToOne" )
                        <%-currTypeName.toLowerCase()%> = update(<%-currTypeName.toLowerCase()%>, '<%-field.name%>', tmp.values<%-fTypeName%>[tmp.values<%-currTypeName%>.indexOf(index)], new model.<%-currTypeName%>)

                    }// if doenst exist we create it and sort the field type indexes
                    else{
                        entityIndex.push(
                            {
                                name : "<%-currTypeName%>_<%-fTypeName%>_oneToOne",
                                values<%-currTypeName%> : [1,2,3,4,5],
                                values<%-fTypeName%> : [1,2,3,4,5].sort( () => .5 - Math.random() )
                            }
                        )
                        // we drop and restore constraints only once
                        removeConstraints.add("ALTER TABLE \"<%-currentTypeName.toLowerCase()%>\" DROP CONSTRAINT \"<%-field.foreign_key.name%>_fkey\"")
                        restoreConstraints.add(`ALTER TABLE "<%-currentTypeName.toLowerCase()%>" ADD <%-field.foreign_key.constraint%> DEFERRABLE INITIALLY DEFERRED`)
                    }
                    <%break
                case  "oneToMany":
                    if(field.delegated_field.state && field.delegated_field.side === "target" ){_%>
                        //OneToMany field Management
                        <%-currTypeName.toLowerCase()%> = update(<%-currTypeName.toLowerCase()%>, '<%-field.name%>', Math.floor((Math.random() * 5) + 1), new model.<%-currTypeName%>)
                        removeConstraints.add("ALTER TABLE \"<%-currTypeName.toLowerCase()%>\" DROP CONSTRAINT \"<%-field.foreign_key.name%>_fkey\"")
                        restoreConstraints.add(`ALTER TABLE "<%-currTypeName.toLowerCase()%>" ADD <%-field.foreign_key.constraint%> DEFERRABLE INITIALLY DEFERRED`)

                    <%_}_%>
                    <%break
                case  "manyToOne":
                    if(field.delegated_field.state && field.delegated_field.side === "target" ){_%>
                        //manyToOne field Management
                        <%-currTypeName.toLowerCase()%> = update(<%-currTypeName.toLowerCase()%>, '<%-field.name%>', Math.floor((Math.random() * 5) + 1), new model.<%-currTypeName%>)
                        removeConstraints.add("ALTER TABLE \"<%-currTypeName.toLowerCase()%>\" DROP CONSTRAINT \"<%-field.foreign_key.name%>_fkey\"")
                        restoreConstraints.add(`ALTER TABLE "<%-currTypeName.toLowerCase()%>" ADD <%-field.foreign_key.constraint%> DEFERRABLE INITIALLY DEFERRED`)
                    <%_}_%>
                    <%break
                case  "manyOnly":
                    if(field.delegated_field.state && field.delegated_field.side === "target" ){_%>
                        //manyOnly field Management
                        <%-currTypeName.toLowerCase()%> = update(<%-currTypeName.toLowerCase()%>, '<%-field.name%>', Math.floor((Math.random() * 5) + 1), new model.<%-currTypeName%>)
                        removeConstraints.add("ALTER TABLE \"<%-currTypeName.toLowerCase()%>\" DROP CONSTRAINT \"<%-field.foreign_key.name%>_fkey\"")
                        restoreConstraints.add(`ALTER TABLE "<%-currTypeName.toLowerCase()%>" ADD <%-field.foreign_key.constraint%> DEFERRABLE INITIALLY DEFERRED`)
                    <%_}_%>
                    <%break_%>
                <%_}_%>
            <%}_%>        
    <%});_%>
   
}